# This is the "minimum viable" configuration necessary to run a `native-image` build with --strict-image-heap,
# which is not yet default but still beneficial to prevent surprise instantiation at build-time turning into
# surprising persistent state at runtime. As-is, the changes to LogbackConfigurator to function correctly
# with build-time initialization were deeply surprising.
#
# As mentioned in LogbackConfigurator, it's necessary at build-time because Netty sets up loggers in its class
# initializers. While these classes aren't persisted into the image heap, the logging setup triggered by them
# still is, hence all of this logging infrastructure being configured to initialize at build-time.
Args = --strict-image-heap \
  --initialize-at-build-time=name.djsweet.thorium.logging.LogbackConfigurator \
  --initialize-at-build-time=name.djsweet.thorium.logging.LogbackConfigurator$configure$2 \
  --initialize-at-build-time=ch.qos.logback.classic.Level \
  --initialize-at-build-time=ch.qos.logback.classic.Logger \
  --initialize-at-build-time=ch.qos.logback.classic.LoggerContext \
  --initialize-at-build-time=ch.qos.logback.classic.spi.LoggerContextVO \
  --initialize-at-build-time=ch.qos.logback.classic.spi.TurboFilterList \
  --initialize-at-build-time=ch.qos.logback.classic.util.ContextInitializer$1 \
  --initialize-at-build-time=ch.qos.logback.classic.util.LogbackMDCAdapter \
  --initialize-at-build-time=ch.qos.logback.core.BasicStatusManager \
  --initialize-at-build-time=ch.qos.logback.core.status.InfoStatus \
  --initialize-at-build-time=ch.qos.logback.classic.util.ContextInitializer \
  --initialize-at-build-time=ch.qos.logback.core.helpers.CyclicBuffer \
  --initialize-at-build-time=ch.qos.logback.core.spi.ContextAwareImpl \
  --initialize-at-build-time=ch.qos.logback.core.spi.LogbackLock \
  --initialize-at-build-time=com.github.ajalt.mordant.internal.nativeimage.NativeImagePosixMppImpls \
  --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventLoop
